// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: querries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addUserToGroup = `-- name: AddUserToGroup :exec
INSERT INTO user_groups (user_id, group_id) VALUES ($1, $2)
`

type AddUserToGroupParams struct {
	UserID  int32 `json:"user_id"`
	GroupID int32 `json:"group_id"`
}

func (q *Queries) AddUserToGroup(ctx context.Context, arg AddUserToGroupParams) error {
	_, err := q.db.Exec(ctx, addUserToGroup, arg.UserID, arg.GroupID)
	return err
}

const createGroup = `-- name: CreateGroup :one
INSERT INTO groups (name, description) VALUES ($1, $2) RETURNING id, name, description
`

type CreateGroupParams struct {
	Name        string  `json:"name"`
	Description *string `json:"description"`
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (Groups, error) {
	row := q.db.QueryRow(ctx, createGroup, arg.Name, arg.Description)
	var i Groups
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const createSubtask = `-- name: CreateSubtask :one
INSERT INTO subtasks (title, description, due_date, status, task_id) VALUES ($1, $2, $3, $4, $5) RETURNING id, title, description, due_date, status, task_id
`

type CreateSubtaskParams struct {
	Title       string           `json:"title"`
	Description *string          `json:"description"`
	DueDate     pgtype.Timestamp `json:"due_date"`
	Status      string           `json:"status"`
	TaskID      *int32           `json:"task_id"`
}

func (q *Queries) CreateSubtask(ctx context.Context, arg CreateSubtaskParams) (Subtasks, error) {
	row := q.db.QueryRow(ctx, createSubtask,
		arg.Title,
		arg.Description,
		arg.DueDate,
		arg.Status,
		arg.TaskID,
	)
	var i Subtasks
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.DueDate,
		&i.Status,
		&i.TaskID,
	)
	return i, err
}

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (title, description, due_date, status, group_id, user_id) VALUES ($1, $2, $3, $4, $5, $6)RETURNING id, title, description, due_date, status, group_id, user_id
`

type CreateTaskParams struct {
	Title       string           `json:"title"`
	Description *string          `json:"description"`
	DueDate     pgtype.Timestamp `json:"due_date"`
	Status      string           `json:"status"`
	GroupID     *int32           `json:"group_id"`
	UserID      *int32           `json:"user_id"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Tasks, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.Title,
		arg.Description,
		arg.DueDate,
		arg.Status,
		arg.GroupID,
		arg.UserID,
	)
	var i Tasks
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.DueDate,
		&i.Status,
		&i.GroupID,
		&i.UserID,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, password, email) VALUES ($1, $2, $3) RETURNING id, username, password, email
`

type CreateUserParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
	Email    string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (Users, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Password, arg.Email)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
	)
	return i, err
}

const deleteGroup = `-- name: DeleteGroup :exec
DELETE FROM groups WHERE id = $1
`

func (q *Queries) DeleteGroup(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteGroup, id)
	return err
}

const deleteSubtask = `-- name: DeleteSubtask :exec
DELETE FROM subtasks WHERE id = $1
`

func (q *Queries) DeleteSubtask(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteSubtask, id)
	return err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteTask, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getGroup = `-- name: GetGroup :one
SELECT id, name, description FROM groups WHERE id = $1 LIMIT 1
`

func (q *Queries) GetGroup(ctx context.Context, id int32) (Groups, error) {
	row := q.db.QueryRow(ctx, getGroup, id)
	var i Groups
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const getSubtask = `-- name: GetSubtask :one
SELECT id, title, description, due_date, status, task_id FROM subtasks WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSubtask(ctx context.Context, id int32) (Subtasks, error) {
	row := q.db.QueryRow(ctx, getSubtask, id)
	var i Subtasks
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.DueDate,
		&i.Status,
		&i.TaskID,
	)
	return i, err
}

const getTask = `-- name: GetTask :one
SELECT id, title, description, due_date, status, group_id, user_id FROM tasks WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTask(ctx context.Context, id int32) (Tasks, error) {
	row := q.db.QueryRow(ctx, getTask, id)
	var i Tasks
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.DueDate,
		&i.Status,
		&i.GroupID,
		&i.UserID,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, password, email FROM users WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (Users, error) {
	row := q.db.QueryRow(ctx, getUser, username)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
	)
	return i, err
}

const listGroups = `-- name: ListGroups :many
SELECT id, name, description FROM groups LIMIT $1 OFFSET $2
`

type ListGroupsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListGroups(ctx context.Context, arg ListGroupsParams) ([]Groups, error) {
	rows, err := q.db.Query(ctx, listGroups, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Groups{}
	for rows.Next() {
		var i Groups
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTaskSubtasks = `-- name: ListTaskSubtasks :many
SELECT id, title, description, due_date, status, task_id FROM subtasks WHERE task_id = $1
`

func (q *Queries) ListTaskSubtasks(ctx context.Context, taskID *int32) ([]Subtasks, error) {
	rows, err := q.db.Query(ctx, listTaskSubtasks, taskID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Subtasks{}
	for rows.Next() {
		var i Subtasks
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.DueDate,
			&i.Status,
			&i.TaskID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTasks = `-- name: ListTasks :many
SELECT id, title, description, due_date, status, group_id, user_id FROM tasks LIMIT $1 OFFSET $2
`

type ListTasksParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTasks(ctx context.Context, arg ListTasksParams) ([]Tasks, error) {
	rows, err := q.db.Query(ctx, listTasks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tasks{}
	for rows.Next() {
		var i Tasks
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.DueDate,
			&i.Status,
			&i.GroupID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, password, email FROM users LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]Users, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Users{}
	for rows.Next() {
		var i Users
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeUserFromGroup = `-- name: RemoveUserFromGroup :exec
DELETE FROM user_groups WHERE user_id = $1 AND group_id = $2
`

type RemoveUserFromGroupParams struct {
	UserID  int32 `json:"user_id"`
	GroupID int32 `json:"group_id"`
}

func (q *Queries) RemoveUserFromGroup(ctx context.Context, arg RemoveUserFromGroupParams) error {
	_, err := q.db.Exec(ctx, removeUserFromGroup, arg.UserID, arg.GroupID)
	return err
}

const updateGroup = `-- name: UpdateGroup :one
UPDATE groups
SET
    name = coalesce($1, name),
    description = coalesce($2, description)
WHERE id = $3
RETURNING id, name, description
`

type UpdateGroupParams struct {
	Name        *string `json:"name"`
	Description *string `json:"description"`
	ID          int32   `json:"id"`
}

func (q *Queries) UpdateGroup(ctx context.Context, arg UpdateGroupParams) (Groups, error) {
	row := q.db.QueryRow(ctx, updateGroup, arg.Name, arg.Description, arg.ID)
	var i Groups
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const updateSubtask = `-- name: UpdateSubtask :one
UPDATE subtasks
SET
    title = coalesce($1, title),
    description = coalesce($2, description),
    due_date = coalesce($3, due_date),
    status = coalesce($4, status)
WHERE id = $5
RETURNING id, title, description, due_date, status, task_id
`

type UpdateSubtaskParams struct {
	Title       *string          `json:"title"`
	Description *string          `json:"description"`
	DueDate     pgtype.Timestamp `json:"due_date"`
	Status      *string          `json:"status"`
	ID          int32            `json:"id"`
}

func (q *Queries) UpdateSubtask(ctx context.Context, arg UpdateSubtaskParams) (Subtasks, error) {
	row := q.db.QueryRow(ctx, updateSubtask,
		arg.Title,
		arg.Description,
		arg.DueDate,
		arg.Status,
		arg.ID,
	)
	var i Subtasks
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.DueDate,
		&i.Status,
		&i.TaskID,
	)
	return i, err
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks
SET
    title = coalesce($1, title),
    description = coalesce($2, description),
    due_date = coalesce($3, due_date),
    status = coalesce($4, status)
WHERE id = $5
RETURNING id, title, description, due_date, status, group_id, user_id
`

type UpdateTaskParams struct {
	Title       *string          `json:"title"`
	Description *string          `json:"description"`
	DueDate     pgtype.Timestamp `json:"due_date"`
	Status      *string          `json:"status"`
	ID          int32            `json:"id"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Tasks, error) {
	row := q.db.QueryRow(ctx, updateTask,
		arg.Title,
		arg.Description,
		arg.DueDate,
		arg.Status,
		arg.ID,
	)
	var i Tasks
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.DueDate,
		&i.Status,
		&i.GroupID,
		&i.UserID,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    username = coalesce($1, username),
    password = coalesce($2, password),
    email = coalesce($3, email)
WHERE username = $1
RETURNING id, username, password, email
`

type UpdateUserParams struct {
	Username *string `json:"username"`
	Password *string `json:"password"`
	Email    *string `json:"email"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (Users, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.Username, arg.Password, arg.Email)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
	)
	return i, err
}
